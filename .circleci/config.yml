version: 2
jobs:
  build:
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - run:
          name: Install OS dependencies
          command: |
            apt-get update
            apt-get install -y git build-essential libpcre3-dev zlib1g-dev libcurl4-openssl-dev wget curl tar cmake clang-5.0 clang-format-5.0
            echo $(which clang)
      - run:
          name: Run clang-format
          command: |
            find ./ -iname *.h -o -iname *.cpp | while read fname; do 
              changes=$(clang-format-5.0 -output-replacements-xml $fname | grep -c "<replacement " || true)
              if [ $changes != 0 ]
              then
                clang-format-5.0 -output-replacements-xml $fname
                echo "$fname did not pass clang-format, consider running: find ./ -iname *.h -o -iname *.cpp | xargs clang-format -i"
                exit 1
              fi
            done
      - run:
          name: Compile OpenTracing dependency
          command: |
            wget -O opentracing-cpp.tar.gz https://github.com/opentracing/opentracing-cpp/archive/v1.3.0.tar.gz
            tar zxvf opentracing-cpp.tar.gz
            mkdir opentracing-cpp-1.3.0/.build
            pushd opentracing-cpp-1.3.0/.build
            cmake ..
            make
            make install
            popd
      - run:
          name: Compile Msgpack dependency
          command: |
            wget https://github.com/msgpack/msgpack-c/releases/download/cpp-2.1.5/msgpack-2.1.5.tar.gz
            tar zxvf msgpack-2.1.5.tar.gz
            mkdir msgpack-2.1.5/.build
            pushd msgpack-2.1.5/.build
            cmake ..
            make
            make install
            popd
      # - run:
      #     name: Run Datadog C++ OpenTracing tests
      #     command: |
      #       rm -rf .build
      #       mkdir .build
      #       pushd .build
      #       cmake ..
      #       make
      #       ctest --output-on-failure
      #       popd
      # - run:
      #     name: Run Datadog C++ OpenTracing tests (with tsan and usan)
      #     command: |
      #       rm -rf .build
      #       mkdir .build
      #       pushd .build
      #       cmake -DSANITIZE_THREAD=On -DSANITIZE_UNDEFINED=On ..
      #       make
      #       ctest --output-on-failure
      #       popd
      - run:
          name: Run Datadog C++ OpenTracing tests (with msan)
          command: |
            rm -rf .build
            mkdir .build
            pushd .build
            # clang required for Memory Sanitizer.
            cmake -DSANITIZE_MEMORY=On -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
            make
            ctest --output-on-failure
            popd
      - run:
          name: Run Datadog C++ OpenTracing tests (with asan)
          command: |
            rm -rf .build
            mkdir .build
            pushd .build
            cmake -DSANITIZE_ADDRESS=On ..
            make
            ctest --output-on-failure
            popd
