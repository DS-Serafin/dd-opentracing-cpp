version: 2

source_dependency_versions: &source_dependency_versions
  MSGPACK_VERSION: 3.0.1
  OPENTRACING_VERSION: 1.4.0
  CURL_VERSION: 7.60.0

defaults: &defaults
  working_directory: ~/dd-opentracing-cpp
  docker:
    - image: datadog/docker-library:dd_opentracing_cpp_ubuntu_18.04_0_2_1

jobs:
  build:
    <<: *defaults
    environment:
      <<: *source_dependency_versions
      CMAKE_ARGS: -DBUILD_PLUGIN=ON -DBUILD_SHARED=OFF
    steps:
      - checkout
      - run:
          name: Run clang-format
          command: |
            find ./ -iname *.h -o -iname *.cpp | while read fname; do 
              changes=$(clang-format-5.0 -output-replacements-xml $fname | grep -c "<replacement " || true)
              if [ $changes != 0 ]
              then
                clang-format-5.0 -output-replacements-xml $fname
                echo "$fname did not pass clang-format, consider running: find ./ -iname *.h -o -iname *.cpp | xargs clang-format -i"
                exit 1
              fi
            done
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build
          command: |
            rm -rf .build
            mkdir -p .build
            mkdir -p /tmp/build/
            cd .build
            cmake $CMAKE_ARGS ..
            make
            cp libdd_opentracing_plugin.so /tmp/build/libdd_opentracing_plugin.so
      - persist_to_workspace:
          root: /tmp/
          paths:
            - build
      - store_artifacts:
          path: /tmp/build

  test_sanitizer_base: &test_sanitizer_base
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Build source dependencies
          command: |
            ./scripts/install_dependencies.sh
      - run:
          name: Build and test
          command: |
            rm -rf .build
            mkdir -p .build
            cd .build
            cmake $CMAKE_ARGS ..
            make
            ctest --output-on-failure

  test_tsan:
    <<: *test_sanitizer_base
    environment:
      <<: *source_dependency_versions
      CMAKE_ARGS: -DBUILD_TESTING=ON -DSANITIZE_THREAD=On -DSANITIZE_UNDEFINED=On

  test_asan:
    <<: *test_sanitizer_base
    environment:
      <<: *source_dependency_versions
      CMAKE_ARGS: -DBUILD_TESTING=ON -DSANITIZE_ADDRESS=On

  integration_test_nginx:
    <<: *defaults
    environment:
      NGINX_OPENTRACING_VERSION: 0.4.0
      NGINX_VERSION: 1.14.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install nginx
          command: |
            CODENAME=$(lsb_release -s -c) # eg "bionic", "xenial"
            wget http://nginx.org/keys/nginx_signing.key
            apt-key add nginx_signing.key
            echo deb http://nginx.org/packages/ubuntu/ ${CODENAME} nginx >> /etc/apt/sources.list
            echo deb-src http://nginx.org/packages/ubuntu/ ${CODENAME} nginx >> /etc/apt/sources.list
            apt-get update
            apt-get install nginx=${NGINX_VERSION}-1~${CODENAME}
      - run:
          name: Integration test
          command: |
            # Install the Datadog plugin
            cp ./build/libdd_opentracing_plugin.so /usr/local/lib/libdd_opentracing_plugin.so
            # Change the config to use it.
            NGINX_MODULES=$(nginx -V 2>&1 | grep "configure arguments" | sed -n 's/.*--modules-path=\([^ ]*\).*/\1/p')
            wget https://github.com/opentracing-contrib/nginx-opentracing/releases/download/v${NGINX_OPENTRACING_VERSION}/linux-amd64-nginx-${NGINX_VERSION}-ngx_http_module.so.tgz
            tar zxf linux-amd64-nginx-${NGINX_VERSION}-ngx_http_module.so.tgz -C ${NGINX_MODULES}
            cd ./test/integration/nginx/
            NGINX_CONF=$(nginx -V 2>&1 | grep "configure arguments" | sed -n 's/.*--conf-path=\([^ ]*\).*/\1/p')
            cp nginx.conf $NGINX_CONF
            cp dd-config.json /etc/dd-config.json
            mkdir -p /var/www/
            cp index.html /var/www/
            # Run the tests.
            ./nginx_integration_test.sh


workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test_tsan
      - test_asan
      - integration_test_nginx:
          requires:
            - build
